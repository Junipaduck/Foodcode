<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itwillbs.foodcode.mapper.ReviewMapper">
	<insert id="insertReview">
		<selectKey keyProperty="review_idx" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(review_idx), 0) FROM review
		</selectKey>
		INSERT INTO review
			VALUES (
				#{review_idx} + 1 -- 리뷰 글번호
				,#{review_content} -- 리뷰 내용
				,#{review_star} -- 리뷰 평점
				,now() -- 리뷰 작성일
				,#{review_idx} + 1 -- 리뷰 참조글번호
				,1 -- review_re_lev
				,1 -- review_re_seq
				,#{store_idx} -- store_idx
				,#{member_id} -- member_id
				,#{review_file} -- 리뷰 이미지 파일
				,#{review_file_path}
				,#{merchant_uid}
				,'N' -- 리뷰 삭제 요청 대기 상태 
			)
	</insert>
	
	<!-- 답글 insert -->
	<insert id="insertReviewReply">
		<selectKey keyProperty="reply_idx" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(reply_idx), 0) FROM review_reply
		</selectKey>
		INSERT INTO review_reply
			VALUES (
				#{reply_idx} + 1 -- 리뷰 글번호
				,#{review_idx}
				,#{reply_content}
				,now()
			)
	</insert>
	
	<update id="updateReview">
		UPDATE review 
			SET
			review_content = #{review_content}
			,review_star = #{review_star}
			,review_file = #{review_file}
			WHERE
			review_idx = #{review_idx}
	</update>
	
	<delete id="deleteReview">
		DELETE 
			FROM review
			WHERE review_idx = #{review_idx}
	</delete>
	
	<!-- 리뷰 목록 조회 -->
	<select id="selectReviewList" resultType="com.itwillbs.foodcode.vo.ReviewVO">
		SELECT 
			r.review_idx
			, r.member_id 
			, s.store_name 
			, r.review_content 
			, r.review_file 
			, r.review_star 
			, r.review_date
			, s.store_idx
			, r.review_re_ref
			, r.review_re_lev
			, r.review_re_seq
			, r.review_file_path 
			FROM review r JOIN store s
			ON r.store_idx = s.store_idx
			<if test="!searchKeyword.equals('')">
				WHERE 
				<choose>
					<when test="searchType.equals('content')">
						review_content LIKE CONCAT('%', #{searchKeyword}, '%')
					</when>
				</choose>
			</if>
			ORDER BY
				review_re_ref DESC
				, review_re_seq ASC
			LIMIT
				#{startRow}
				,#{listLimit}
	</select>
	
	<!-- 글 목록 총 갯수 조회 -->
	<select id="selectReviewListCount" resultType="int">
		SELECT COUNT(*)
			FROM review 
			<if test="!searchKeyword.equals('')">
				WHERE
				<choose>
					<when test="searchType.equals('content')">
						review_content LIKE CONCAT('%', #{searchKeyword}, '%')
					</when>
				</choose>
			</if>
	</select>
	
	<!-- 특정 아이디 리뷰 목록 조회용 -->
	<select id="customerReviewList" resultType="com.itwillbs.foodcode.vo.ReviewVO">
		   SELECT 
				r.review_idx
				, r.member_id 
				, s.store_name 
				, r.review_content 
				, r.review_file 
				, r.review_star 
				, r.review_date
				, s.store_idx
				, r.review_re_ref
				, r.review_re_lev
				, r.review_re_seq
				, r.review_file_path 
				FROM review r JOIN store s
				ON r.store_idx = s.store_idx
				WHERE r.member_id = #{member_id}
				ORDER BY
					review_re_ref DESC
					, review_re_seq ASC
				LIMIT
					20
	</select>
	
	<select id="selectCustomerReviewListCount" resultType="int">
		SELECT COUNT(*)
			FROM review
	</select>
	
	<!-- 가게 상세 페이지 리뷰조회 - 임시용 -->
	<select id="reviewList" resultType="com.itwillbs.foodcode.vo.ReviewVO">
	   SELECT *
            FROM review
         	ORDER BY 
               	review_re_ref
           	LIMIT 
            10
	</select>
	
	<select id="selectMemberList" resultType="com.itwillbs.foodcode.vo.MemberVO">
		SELECT *
			FROM member
	</select>
	
	<!-- 점주 마이페이지 리뷰 목록 조회 -->
	<select id="selectOwnerReviewList" resultType="com.itwillbs.foodcode.vo.ReviewVO">
		SELECT 
			r.review_idx
			, r.member_id 
			, s.store_name 
			, r.review_content 
			, r.review_file
			, r.review_star
			, r.review_date
			FROM review r JOIN store s
			ON r.store_idx = s.store_idx
			WHERE store_name 
				IN (SELECT store_name FROM store WHERE member_id = #{id})
			ORDER BY
				review_re_ref DESC
				, review_re_seq ASC
	</select>
	

	<!-- 글 목록 총 갯수 조회 - 점주 마이페이지 -->
	<select id="selectOwnerReviewListCount" resultType="int">
		SELECT COUNT(*)
			FROM review 
	</select>
	
	<!-- 리뷰 수정 시 파일 삭제 -->
	<delete id="deleteReiviewFile">
		UPDATE review
			SET
				review_file = ''
				, review_file_path = ''
			WHERE
				review_idx = #{review_idx}
	</delete>
	
	
	<!-- 리뷰 별점 평균 계산 -->
	<select id="getStarAvg" resultType="map">
			SELECT
<!-- 				ROUND(AVG(r.review_star), 1) AS review_star, s.store_idx -->
				IFNULL(ROUND(AVG(r.review_star), 1),'아직 리뷰가 없어요~‍') AS review_star, s.store_idx <!-- 만약 review가 하나도 없는 가게는 리뷰별점평균을 0으로 설정함 -->
				FROM
					store s
				JOIN review r ON
					s.store_idx = r.store_idx
				WHERE
					s.store_idx = #{s.store_idx}; 
	</select>
	
	<!-- 글 상세정보 조회 -->
	<select id="selectReview" resultType="com.itwillbs.foodcode.vo.ReviewVO">
		SELECT *
			FROM review
			WHERE review_idx = #{review_idx}	
	</select>
	
	<!-- 댓글 조회 -->
	<select id="selectReply" resultType="com.itwillbs.foodcode.vo.ReplyVO">
		SELECT *
			FROM review_reply
			WHERE review_idx = #{review_idx}	
	</select>
	
	<!-- 댓글 작성 시 로그인 유무 판단 -->
	<select id="selectMemberInfo" resultType="com.itwillbs.foodcode.vo.MemberVO">
		SELECT *
			FROM member
			WHERE member_id = #{id}
	</select>
	
	<!-- 댓글 작성 시 이미 작성되었는지 판단. 댓글이 존재할 시 경고창  -->
	<select id="selectReplyCount" resultType="int">
		SELECT COUNT(*)
			FROM review_reply
			WHERE review_idx = #{review_idx}
	</select>
	
	<!-- 점주 회원 리뷰 삭제 신청 -->
	<update id="updateOwnerReview">
		UPDATE review
			SET
			delete_auth_status = 'Y' 
			WHERE
			review_idx = #{review_idx}	
	</update>
</mapper>






















































